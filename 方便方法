代码框架，代码块
如：
检查表是否正确，一发现有不正确的就返回
function CheckSheet() as dictionary
ResultDic
'ResultDic的结构：StatusCode成功或失败的flag，失败信息
''ResultDic={“STATUS_CODE”:1 OR 0,”ERRORMSG”:””}
'
ResultDic(“STATUS_CODE”)=1

'1.检查第一点

 if 不通过 then
‘设置ResultDic
isError=true
ResultDic(“STATUS_CODE”)=0
ResultDic(“ERRORMSG”)=”something goes wrong”

Goto EndOfSub
endif
'2.检查第二点
‘XXXXXXXXXX


EndOfSub:
CheckSheet=ResultDic

end sub

'检查表格是否符合所有条件
CheckSheetAllConditions（）
{
'ResultDic的结构：StatusCode成功或失败的flag，失败信息
'ResultDic={“STATUS_CODE”:1 OR 0,”ERRORMSG”:””}

ifErrorHappen=false
errorMsgStr=””

‘开始检查
比如
所有应该有的字段是否存在，返回欠缺的字段？

1.第一个检查项目
If 通过 then

Else
ifErrorHappen=false
errorMsgStr=errorMsgStr+”<##>”+”item1 something goes wrong”
endif


‘填充返回结果
If ifErrorHappen then
ResultDic(“STATUS_CODE”)=1
ResultDic(“ERRORMSG”)=errorMsgStr
endif

CheckSheetAllConditions=ResultDic


}



检查常用手法

检查某顺序的几个（multiline）field是否存在于指定尺寸的range里，考不考虑field的顺序option
1.获得目标表格的最大列和行，确定表头范围
2.把表头range和原先应该有的array放入到该函数里，（array可以是一行也可以是多行，本质上是比较数组和range的value生成的数组是否匹配）
如果是多行，那么就只能固定顺序
如果是一行，那么可以顺序不固定，并且返回顺序是不是固定的判断结果
所以，可能可以作为两个函数
isMultilineFieldMatch(arrToDetect ,arrStandard ) 返回true false
isSingleLineFieldMatch(arrToDetect ,arrStandard ,needInOrder是否要求按照顺序) 返回true false


‘传入数组更有通用性
Function isMultilineFieldMatch(ByVal arrToDetect As Variant, ByVal arrStandard As Variant) As Boolean
    '判断参数是否为数组
    If Not IsArray(arrToDetect) Or Not IsArray(arrStandard) Then
    '检测到参数不为数组，程序停止
    Stop
    End If
    
    '1.先判断尺寸是否一致
    arrToDetectRowCount = UBound(arrToDetect, 1) - LBound(arrToDetect, 1) + 1
    arrToDetectColCount = UBound(arrToDetect, 2) - LBound(arrToDetect, 2) + 1
    
    arrStandardRowCount = UBound(arrStandard, 1) - LBound(arrStandard, 1) + 1
    arrStandardColCount = UBound(arrStandard, 2) - LBound(arrStandard, 2) + 1
    
    If arrToDetectRowCount <> arrStandardRowCount Or arrToDetectColCount <> arrStandardColCount Then
    '尺寸不匹配返回False
    isMultilineFieldMatch = False
    Exit Function
    End If
    
    arrStandardRowIndexOffset = LBound(arrStandard, 1) - LBound(arrToDetect, 1)
    arrStandardColIndexOffset = LBound(arrStandard, 2) - LBound(arrToDetect, 2)
    
    
    For i = LBound(arrToDetect, 1) To UBound(arrToDetect, 1)
        For j = LBound(arrToDetect, 2) To UBound(arrToDetect, 2)
        '一律用字符串比较。空单元也用空字符串比较。所以传入的arr参数，如果有空的单元格，应该变为""
            If arrToDetect(i, j) & "" <> arrStandard(i + arrStandardRowIndexOffset, j + arrStandardColIndexOffset) & "" Then
            '发现有不一样的地方
                isMultilineFieldMatch = False
                Exit Function
            End If
        Next j
    Next i
    
    isMultilineFieldMatch = True
End Function





检查某顺序的几个field是否存在于某range里或某相同排列的arr里，考不考虑field的顺序option




CompareSingleDimentionArray检查字段是否缺失，缺失了哪些，多出了哪些，横向，纵向
数组元素应该唯一
返回一份报告字典
0.检查数组元素是否唯一
1.检查数目是否准确
2.如果数目准确，按提供的字段和原来应该要有的字段两份结论string，分别指出多余的和空缺的
3.如果匹配，可以用其他函数获取字段的index，行或者是列的序号（相对序号和绝对行列号）
输入参数:两个数组
字典结构：
数组1元素个数
数组2元素个数
数组1和数组2元素个数差异
数组1与数组2共同元素数组
数组1比数组2多的元素数组
数组1比数组2少的元素数组
如果数组元素完全一样只是顺序不同，那么输出数组1key-value(在数组2的index，1下限)





比较两个数组的size（shape）
CompareArrayShape(byval arr1 as variant ,byval arr2 as variant)



提供两个数组，获得第一个数组的元素相对于第二个数组的绝对序号
前提:两个数组都唯一


提供一个数组和一个range，获得第一个数组的元素相对于range的表格列号和相对数组的列号




获得某个横向或者纵向的单行或单列的field-row 或field-col的   rowindex或colIndex的字典







合并单元格的field如何检查（数组匹配）

自创数组类似sql筛选的体系

自创数组类似表格排序的体系
func(arr,)
   
常规场景操作自动化
1.汇总框架
涉及到：
1.文件夹
文件夹是否存在
文件是否存在
文件夹不存在则创建CreateDir()
获取文件夹下文件列表
获取文件夹下某些文件格式列表
获取文件夹下子文件夹列表
获取文件夹和子文件夹下所有文件列表
获取文件夹和子文件夹下的某些文件格式列表
删除文件夹下文件-按文件列表删
删除文件夹下文件-按某些文件格式删
清空文件夹(删除再新建)
2.文件
文件路径
文件格式名
文件名称
文件短名带格式名
文件其他信息
3.
某表名表格是否存在
某些表名是否存在
提供表名数组，返回存在于工作簿的表名(实质是提供数组A和数组B，返回A存在于数组B的结果)
提供表名数组，返回不存在于工作簿的表名(实质是提供数组A和数组B，返回A不存在于数组B的结果)
数组元素相减（集合相减）？交集？
二维数组转一维
按列拼接，按行拼接

多行多列数组转单行单列数组

按表名数组创建新表（已存在的如何处理？）
按表名数组删除表（不存在的表名是否报错？）
表格位置排序
删除所有表除了某表名
删除所有表除了某表
删除所有表除了数组里的表名
删除所有表除了数组里的表（数组里不存在于实际工作簿的如何处理？）
选中某些表（按表名，按表对象）
4.查找
查找
SearchRange 按正则查找，按数值查找，按模糊查找。返回符合的range数组，包括合并单元格，是否是合并单元格，返回合并单元格所有信息，起始行列，合并的行列数
SearchCell，按正则查找，按数值查找，按模糊查找。返回符合的单元格数组，如果查找不到则返回空数组还是空？
SearchInRange，返回列号或者区域的相对序号
搜索field在表头的位置，相对列序号
搜索侧边field在单列表头的位置，相对行序号

MergedRange起始行列，占据行列数
该表是否存在某些特征的单元格（关键词数组，全符合，或者符合部分）
该表是否存在某些特征的连续几个单元格（关键词数组，全符合，或者符合部分，模糊匹配还是全匹配，大小写）
5.基于查找的处理
合并单元格解除并填充
符合条件的range或cell，填充数值或者清除
SearchRange多条件：相对位置的旁边单元格有其他标识(规定顺序，不规定顺序，上下，左右，矩阵)
union所有符合条件的结果range
union所有符合条件的结果cell
union所有符合条件的range所在的行或列
union所有符合条件的cell所在的行或列
替换
6.定位范围
最大行
最大列
第一行非空行号
第一列非空列号
/////自此可以获得一个区域，可能包含表头，可能包含侧表头，上下左右的非数据区域
7.定义一个数据区，设定表头行数，侧边field行数，获得实际数据区域，实际数据数组
行数
列数
实际数据行数
实际数据列数
取某列，按序号，按表头，带不带表头，带不带表尾，取到最后还是取到最后一行非空
取某行，按序号，按侧边表头，带不带表头，带不带表尾，取到最后还是取到最后一列非空

8.区域操纵
区域行列对调
WkSheetDelete表删除列
RangeDeleteBy    range删除相对列序号

9.数组操纵
数组按（行号数组）A.清空clear行（清空后行数不变），B.删除行（删除后数组行数变少）
C.替换
数组按（列号数组）A.清空clear行（清空后列数不变），B.删除delete行（删除后数组列数变少）
C.替换
按行或列序号数组，提取某数组形成新数组

数组按条件清空或者删除行列。条件：某行或某列的一个或多个字段符合某特征。

数据清洗

增删查改
数组中间，头，尾，增加行列（1.增加新数据 2.增加空行列）

复制一个一模一样的数组
‘深度复制，可以设置lboundBase 下限开始数字，函数内依赖其他函数计算数组维度，如果想要跟参数数组下标下限一致，那么传入lbound(原数组)作为参数
Function DeepCopyArray(ByVal arr As Variant, Optional lboundBase As Variant) As Variant


    If IsArray(arr) = False Then
        '检测到非数组参数
        Stop
        End
    End If
    
    If IsMissing(lboundBase) Then
        lboundBase = LBound(arr)
    End If
    
    Dim tmpArr() As Variant
    arrDimention = nDim(arr)
    '一维
    If arrDimention = 1 Then
        tmpArrCount = 0
        '计算一维数组元素个数
        arrCount = UBound(arr, 1) - LBound(arr, 1) + 1
        ReDim tmpArr(lboundBase To lboundBase + arrCount - 1)
        '计算下标差异偏移
        indexOffset = UBound(tmpArr, 1) - UBound(arr, 1)
         
        For i = LBound(arr, 1) To UBound(arr, 1)
            tmpArr(i + indexOffset) = arr(i)
        Next i
        DeepCopyArray = tmpArr
        Exit Function
    End If
    
    '二维
    If arrDimention = 2 Then
        
        tmpArrRowCount = 0
        tmpArrColCount = 0
        '计算数组行元素个数
        arrRowCount = UBound(arr, 1) - LBound(arr, 1) + 1
        arrColCount = UBound(arr, 2) - LBound(arr, 2) + 1
        ReDim tmpArr(lboundBase To lboundBase + arrRowCount - 1, lboundBase To lboundBase + arrColCount - 1)
        '计算下标差异偏移
        rowIndexOffset = UBound(tmpArr, 1) - UBound(arr, 1)
        colIndexOffset = UBound(tmpArr, 2) - UBound(arr, 2)
        For i = LBound(arr, 1) To UBound(arr, 1)
            For j = LBound(arr, 2) To UBound(arr, 2)
                tmpArr(i + rowIndexOffset, j + colIndexOffset) = arr(i, j)
            Next j
        Next i
        DeepCopyArray = tmpArr
        Exit Function
    End If
    
    If arrDimention > 2 Then
    '不支持大于2维度的数组
    Stop
    End
    End If
   
End Function


让有数据的数组像粘贴到range左上角第一个单元格一样粘贴到另一个数组里


数组维度
黄色底色代表网摘验证通过
Private Function nDim(ByVal vArray As Variant) As Long
' Purpose: get array dimension (MS)
Dim dimnum     As Long
Dim ErrorCheck As Long    ' OP: As Variant
On Error GoTo FinalDimension

For dimnum = 1 To 60000    ' 60000 being the absolute dimensions limitation
    ErrorCheck = LBound(vArray, dimnum)
Next
' It's good use to formally exit a procedure before error handling
' (though theoretically this wouldn't needed in this special case - see comment)
Exit Function

FinalDimension:
nDim = dimnum - 1

End Function


创建精简版（按功能拆解，需要调用更多外部函数）和完整版的函数

生成一个相同行列的空数组
如果想要跟参数数组下标下限一致，那么传入lbound(原数组)作为参数

生成一个比原来数组增加空行列的数组
上下左右（中间），增加N行或列
Function CreateaExpandArray(ByVal arr As Variant, ByVal addTopCount As Long, ByVal addBottomCount As Long, ByVal addLeftCount As Long, ByVal addRightCount As Long)
    addVerticalCount = addTopCount + addBottomCount
    addHorizonCount = addLeftCount + addRightCount
    
    If IsArray(arr) = False Then
        '检测到非数组参数
        Stop
        End
    End If
    
    arrDimention = nDim(arr)
    
    '一维
    If arrDimention = 1 Then
        '提示先用函数转换为二维
        Stop
        End
    
    End If
    
    
    '二维
    If arrDimention = 2 Then

        '计算数组行列元素个数
        arrRowCount = UBound(arr, 1) - LBound(arr, 1) + 1
        arrColCount = UBound(arr, 2) - LBound(arr, 2) + 1
        
        Dim resultArr() As Variant
        ReDim resultArr(LBound(arr, 1) To UBound(arr, 1) + addVerticalCount, LBound(arr, 2) To UBound(arr, 2) + addHorizonCount)
        
        '把数据源数组粘贴到新数组
        For i = LBound(arr, 1) To UBound(arr, 1)
            For j = LBound(arr, 2) To UBound(arr, 2)
                resultArr(i + addTopCount, j + addLeftCount) = arr(i, j)
            Next j
        Next i
        CreateaExpandArray = resultArr
        Exit Function
    End If
    
    If arrDimention > 2 Then
    '不支持大于2维度的数组
    Stop
    End
    End If
End Function


向下和向左改变Array的尺寸
ResizeArray，也就是Redim Preserve
Function ResizeArray(ByVal arr As Variant, ByVal row As Long, ByVal col As Long)

End Function
一维转二维（数据不变）
Function Arr1DTo2D(arr)
    If IsArray(arr) = False Then
        '检测到非数组参数
        Stop
    End
    End If
    '获得维度
    arrDimention = nDim(arr)
    If arrDimention > 1 Then
        '数组维数大于1，规定只能是1
        Stop
        End
        
    End If
    Dim resultArr() As Variant
    ReDim resultArr(LBound(arr) To LBound(arr), LBound(arr) To UBound(arr))
    
    For i = LBound(arr) To UBound(arr)
        resultArr(LBound(arr), i) = arr(i)
    Next i
    Arr1DTo2D = resultArr
End Function
修改数组下限开始数字

按新序号生成新数组，新数组的列数行数大于等于旧数组，新数组的数据可能只获取旧数组的一部分列号或者行号
FillInArr(newArr,srcArr,fromToDict={srcColIndex:newArrsrcColIndexIndex,xxxxxx})

堆叠多个数组（垂直vstack，水平hstack）
切割数组
截取数组
去掉或截取最后几行，几列

数组处理，参考numpy和pandas框架

10.对数组进行统计
1.临时表里sql统计
2.常见统计：
按列，按行，按整个区域
最大，最小
取唯一

数组一对多查找，数组一对多展开，填充纵向


11.集合

12.字典


13.数据表range与数组
数组粘贴到数据表,返回信息字典，{error:errmsg,lastrow:xxx,}

range设定每个range行或列的数据格式，采用text的格式数组然后读取应用
工作表按格式字典（列号：text format）设定整列格式

区域先设定格式再粘贴数组 pasteArrOnRangeWithFormat(range,arr,formatArray)


vlookup和hlookup和index和match的应用




可能用得着的其他现成函数





分为process(处理)和信息info



单元格高级合并
纵向合并相同单元格
横向合并相同单元格
合并单元格并保留所有值（单元格里原来的每行用换行符换行）
纵向取消合并单元格并填充
横向取消合并单元格并填充



检查关键词列表(arr,或range)有多少存在于某个text（range）中，应用场景比如：表头检测，返回字符串，空，关键词逗号隔开的字符串

2.拆分





总数据key-value, 分数据key，需要填入vlaue。（形式：arr，dic，range）
svlookup


常规手动一系列操作自动化
批量将工作表转为独立工作簿
Sub Newbooks()    'EH技术论坛。VBA编程学习与实践。看见星光    Dim sht As Worksheet, mypath$    With Application.FileDialog(msoFileDialogFolderPicker)   '选择保存工作薄的文件路径        .AllowMultiSelect = False        '不允许多选        If .Show Then            mypath = .SelectedItems(1)            '读取选择的文件路径        Else            Exit Sub            '如果没有选择保存路径，则退出程序        End If    End With    If Right(mypath, 1) <> "\" Then mypath = mypath & "\"    Application.DisplayAlerts = False    '取消显示系统警告和消息，避免重名工作簿无法保存。当有重名工作簿时，会直接覆盖保存。    Application.ScreenUpdating = False    '取消屏幕刷新    For Each sht In Worksheets    '遍历工作表        sht.Copy        '复制工作表，工作表单纯复制后，会成为活动工作薄        With ActiveWorkbook            .SaveAs mypath & sht.Name, xlWorkbookDefault            '保存活动工作薄到指定路径下，以默认文件格式            .Close True '关闭工作薄并保存        End With    Next    MsgBox "处理完成。", , "提醒"    Application.ScreenUpdating = True '恢复屏幕刷新    Application.DisplayAlerts = True '恢复显示系统警告和消息End Sub



数据处理方便方法

常用对象在高级语言里有的特性，做vba化
5. 复制指定文件夹下多工作簿的工作表到汇总工作簿


常用代码封装：判断型isXXXX
系统自带：
isArray
自定义：
isXXX


‘拆分表格到多个表格

’拆分表格到多个文件（每个文件单一表格）


获取value的arr或rng，从不同方法获得：
规范的sheet，一行title
某range，n行title，N行左title，n行右title，n行底title
特殊:某range,n行title
某range,无title




'**************************工作簿
WbCreateSheet(wb,location,shtName)
'ws1 = wb.create_sheet() --> 默认插在工作簿末尾
'ws2 = wb.create_sheet(0) --> 插入在工作簿的第一个位置

WbCreateSheets(Array)

ArrSheetsNameInWb(wb)  '只获取表名，不获取表对象

‘**************************工作表
max_column(sht,rowIndex)
max_row(sht,"a")

ws.merge_cells("A1:B1")
ws.merge_cells(start_column=3,end_column=6,start_row=2,end_row=3)
ws.merged_cells



ws.append()'openpyxl的给表添加行数据的方法

'@功能:工作簿是否存在某表名的工作表
'@返回值：true false
Function IsSheetExist(ByVal wb As Workbook, ByVal shtname As String)
    Dim d
    Set d = CreateObject("Scripting.Dictionary")
    For Each sh In wb.Sheets
       d(sh.Name) = ""
    Next
    If d.exists(shtname) Then
         IsSheetExist= True
    Else
        IsSheetExist= False
    End If
    Set d = Nothing
End Function

‘**************************Range对象
‘列号转字母
Function ColumnIntIndexToLetters(ByVal num As Long) As String
    ColumnIntIndexToLetters = Replace(Cells(1, num).Address(False, False), "1", "")
End Function
‘字母转列号
Function ColumnLettersToIntIndex(ByVal AB As String) As Long
    ColumnLettersToIntIndex = Range("a1:" & AB & "1").Cells.Count
End Function


addHyperlink(path,title)



getRng(startRow,endRow,startCol,endCol)'返回区域
getRowDataFromArr
getRowDataFromRng
getColumnDataFromArr
getColumnDataFromRng


操作
插入行
插入列
插入多行
插入多列

===================================
1 Range.SpecialCells() 
1.1 常用用法
可以非常快速的定位目标单元格
局限性：通用性很强
常用的
定位空单元格   range().specialcells(xlcelltypeblank)
定位最后1个单元格  range().specialcells(xlcelltypelastcell)
非常好，用处很大
实测这个是定位的整个sheet的所有usedrange 的右下角单元格
如果单元格为空但是被设置了格式比如颜色，那么usedrange会包含该单元格，但是end(xlup)会忽略该单元格找到有实际数据的单元格
 

另外一个好用的，定位出错单元格
Range("a1:c20").SpecialCells(xlCellTypeFormulas, 16)
===================================

‘**************************Chart对象

‘**************************Shape对象

‘**************************数据输入

'**************************菜单和工具栏

'**************************Ribbon功能区

'**************************控件

‘**************************'窗体

'**************************目录和文件操作
'@功能:判断文件夹或者文件是否存在
'@AUTHOR: 
'@DIM:
'@EXAMPLE: 
'@注意：strPathName="C:\abcd"和“C:\abcd\”都可以
Function IsPathExists(ByVal strPath As String) As Boolean
    If Dir(strPath, 16) <> Empty Then
        IsPathExists= True
    Else
        IsPathExists= False
    End If
End Function

'@功能:获取某文件夹下的文件列表，可用字符串过滤
'@AUTHOR: 
'@DIM:
'@EXAMPLE: 
'@注意：只返回文件，不返回子文件夹。
'@返回值：返回""或者返回数组
 Function GetFileList(ByVal strDirPath As String, Optional strFilter As String) As Variant
' 将文件列表放到数组
    Dim f As String
    Dim i As Long
    Dim FileList() As String

    If strFilter = "" Then strFilter = "*.*"
        Select Case Right(strDirPath , 1)
            Case "", "/"
            strPath = Left(strPath, Len(strDirPath ) - 1)
    End Select

    ReDim Preserve FileList(0)
    f = Dir(strDirPath & "/" & strFilter)
    Do While Len(f) > 0
       ReDim Preserve FileList(i) As String
       FileList(i) = f
       i = i + 1
       f = Dir()
    Loop
    If FileList(0) <> Empty Then
       GetFileList= FileList
    Else
       GetFileList= ""
    End If
End Function

TODO
'@功能:获取某文件夹下的文件列表，可用array过滤格式名






'@功能：判断文件夹是否存在，不存在则创建
Sub CheckAndCreateDir(byval dirPath as string)
 if IsPathExists(dirPath )=false then

else
MkDir dirPath 
endif

end sub

'@功能：'删掉文件夹再创建
FSO.GetFolder(pathG).Delete
MkDir pathG


'通过文件路径获取文件名
Function GetFileName(strFilePath As String) As String
    Dim strFileName As String
    GetFileName = ""
    If InStr(1, strFilePath, "\") > 0 Then
        strFileName = Split(strFilePath, "\")(UBound(Split(strFilePath, "\")))
        GetFileName = strFileName
    ElseIf InStr(1, strFilePath, "/") > 0 Then
        strFileName = Split(strFilePath, "/")(UBound(Split(strFilePath, "/")))
        GetFileName = strFileName
    End If
End Function


’弹窗选择文件夹


‘弹窗选择单个文件


’弹窗选择多个文件


’‘**************************文件的输入输出


‘‘**************************数据库


’‘**************************Internet


‘‘**************************XML



’‘**************************数组与字典
数组countUnique
https://github.com/x-vba/xlib/blob/master/Modules/xlibArray.bas


数组排序（下面这个代码会多一个空值，数组多一个element）
https://github.com/x-vba/xlib/blob/master/Modules/xlibArray.bas

数组反转
https://github.com/x-vba/xlib/blob/master/Modules/xlibArray.bas



append
indexOf
数组元素个数count，length

数组深度复制copy


集合转换到数组CollectionToArray
VBA数组转换到集合ArrayToCollection

‘‘**************************代码优化与高效编程




‘‘**************************字符串
'@功能:获取去除空格，tab和clean掉不可见字符的字符串
Function GetCleanString(ByVal theStr As String)
    theStr = Replace(theStr, Chr(10), "")
    theStr = Replace(theStr, Chr(13), "")
    theStr = Trim(theStr)
    theStr = Application.WorksheetFunction.Clean(theStr)
    GetCleanString = theStr
End Function


'@功能:根据文件完整路径获取文件名但不包括扩展名（如果文件路径是反向斜杠如何？）
Public Function GetFileNameOfNoExt(ByVal FilePathFileName As String) As String
    On Error Resume Next
    Dim i As Integer, J As Integer, k As Integer
    i = Len(FilePathFileName)
    J = InStrRev(FilePathFileName, "\")
    k = InStrRev(FilePathFileName, ".")
     If k = 0 Then
       GetFileNameOfNoExt= Mid(FilePathFileName, J + 1, i - J)
    Else
      GetFileNameOfNoExt= Mid(FilePathFileName, J + 1, k - J - 1)
    End If
End Function

'截取两字符串中间部分
Public Function GetStringBetweenAandB(ByVal originString As String, ByVal stringA As String, ByVal stringB As String, ByVal isIncludingA As Boolean, ByVal isincludingB As Boolean)
      GetStringBetweenAandB= strBeforeA(strAfterA(originString, stringA, isIncludingA), stringB, isincludingB)
End Function

'某字符串前
Public Function StrBeforeA(ByVal originString As String, ByVal targetAString As String, ByVal isIncludingTargetString As Boolean)
    If InStr(originString, targetAString) = 0 Then
        strBeforeA = ""
        Exit Function
    End If
    If isIncludingTargetString Then
        result = Left(originString, InStr(originString, targetAString) - 1)
        result = result + targetAString
    Else
        result = Left(originString, InStr(originString, targetAString) - 1)
    End If
    strBeforeA = result
End Function

'某字符串后
Public Function StrAfterA(ByVal originString As String, ByVal targetAString As String, ByVal isIncludingTargetString As Boolean)
    If InStr(originString, targetAString) = 0 Then
        strAfterA = ""
        Exit Function
    End If
    If isIncludingTargetString Then
        result = Right(originString, Len(originString) - InStr(originString, targetAString) + 1)
    Else
        result = Right(originString, Len(originString) - InStr(originString, targetAString) - Len(targetAString) + 1)
    End If
    strAfterA = result
End Function


‘**************PDF打印

’=============PDF打印开始
’第一步，对表格设置打印设置，每个表格分别设置，可以遍历
Sub PrintSetting(ByVal sht As Worksheet)

    Application.PrintCommunication = False
    With sht.PageSetup
        .PrintTitleRows = ""
        .PrintTitleColumns = ""
    End With
    Application.PrintCommunication = True
    ActiveSheet.PageSetup.PrintArea = ""
    Application.PrintCommunication = False
    With sht.PageSetup
        .LeftHeader = ""
        .CenterHeader = ""
        .RightHeader = ""
        .LeftFooter = ""
        .CenterFooter = ""
        .RightFooter = ""
        .LeftMargin = Application.InchesToPoints(0.7)
        .RightMargin = Application.InchesToPoints(0.7)
        .TopMargin = Application.InchesToPoints(0.75)
        .BottomMargin = Application.InchesToPoints(0.75)
        .HeaderMargin = Application.InchesToPoints(0.3)
        .FooterMargin = Application.InchesToPoints(0.3)
        .PrintHeadings = False
        .PrintGridlines = False
        .PrintComments = xlPrintNoComments
        .PrintQuality = 600
        .CenterHorizontally = False
        .CenterVertically = False
        .Orientation = xlPortrait
        .Draft = False
        .PaperSize = xlPaperA4
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        .BlackAndWhite = False
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 1
        .PrintErrors = xlPrintErrorsDisplayed
        .OddAndEvenPagesHeaderFooter = False
        .DifferentFirstPageHeaderFooter = False
        .ScaleWithDocHeaderFooter = True
        .AlignMarginsHeaderFooter = True
        .EvenPage.LeftHeader.Text = ""
        .EvenPage.CenterHeader.Text = ""
        .EvenPage.RightHeader.Text = ""
        .EvenPage.LeftFooter.Text = ""
        .EvenPage.CenterFooter.Text = ""
        .EvenPage.RightFooter.Text = ""
        .FirstPage.LeftHeader.Text = ""
        .FirstPage.CenterHeader.Text = ""
        .FirstPage.RightHeader.Text = ""
        .FirstPage.LeftFooter.Text = ""
        .FirstPage.CenterFooter.Text = ""
        .FirstPage.RightFooter.Text = ""
    End With
    Application.PrintCommunication = True
    'ActiveWorkbook.PrintOut Copies:=1, Collate:=True, IgnorePrintAreas:=False

End Sub

‘第二步，打印
        tmpwb.ExportAsFixedFormat Type:=xlTypePDF, Filename:= _
        outputPath + "\" + "xxx" + ".pdf", Quality:= _
        xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, _
        OpenAfterPublish:=False


‘=============PDF打印结束

<===================================>
数组粘贴到range的左上角第一个单元格


'二维数组
'二维数组行数
Function Get2DArrayRowCount(ByVal theArray As Variant)
Get2DArrayRowCount = UBound(theArray, 1) - LBound(theArray, 1) + 1
End Function
'二维数组列数
Function Get2DArrayColumnCount(ByVal theArray As Variant)
Get2DArrayColumnCount = UBound(theArray, 2) - LBound(theArray, 2) + 1
End Function

’数组元素个数




